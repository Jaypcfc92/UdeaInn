// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "AccountToUser")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "SessionToUser")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String        @id @default(cuid())
  name          String?
  role          Enum_RoleName @default(USER)
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]     @relation(name: "AccountToUser")
  sessions      Session[]     @relation(name: "SessionToUser")
  deleted       Boolean       @default(false)
  enabled       Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  profile       Profile?
  bookings      Booking[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Enum_RoleName {
  ADMIN
  RECEPTIONIST
  USER
}

model Profile {
  id        String    @id @default(cuid())
  age       Int?
  address   String?
  birthdate DateTime?
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
  id          String        @id @default(cuid())
  name        String
  description String?
  number      Int           @unique
  capacity    Int
  type        Enum_RoomType
  image       String[]
  status      String        @default("available")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  categoryId  String?
  category    Category?     @relation(fields: [categoryId], references: [id])
  services    Service[]
  bookings    Booking[]
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rooms       Room[]
}

model Booking {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  roomId    String   @map("room_id")
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

enum Enum_RoomType {
  SINGLE
  DOUBLE
  SUITE
  DELUXE
}
